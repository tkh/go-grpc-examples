// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sensor/v1/sensor.proto

package sensorv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tkh/go-grpc-examples/server-stream/gen/sensor/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SensorServiceName is the fully-qualified name of the SensorService service.
	SensorServiceName = "sensor.v1.SensorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SensorServiceStreamSensorDataProcedure is the fully-qualified name of the SensorService's
	// StreamSensorData RPC.
	SensorServiceStreamSensorDataProcedure = "/sensor.v1.SensorService/StreamSensorData"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sensorServiceServiceDescriptor                = v1.File_sensor_v1_sensor_proto.Services().ByName("SensorService")
	sensorServiceStreamSensorDataMethodDescriptor = sensorServiceServiceDescriptor.Methods().ByName("StreamSensorData")
)

// SensorServiceClient is a client for the sensor.v1.SensorService service.
type SensorServiceClient interface {
	StreamSensorData(context.Context, *connect.Request[v1.StreamSensorDataRequest]) (*connect.ServerStreamForClient[v1.StreamSensorDataResponse], error)
}

// NewSensorServiceClient constructs a client for the sensor.v1.SensorService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSensorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SensorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sensorServiceClient{
		streamSensorData: connect.NewClient[v1.StreamSensorDataRequest, v1.StreamSensorDataResponse](
			httpClient,
			baseURL+SensorServiceStreamSensorDataProcedure,
			connect.WithSchema(sensorServiceStreamSensorDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sensorServiceClient implements SensorServiceClient.
type sensorServiceClient struct {
	streamSensorData *connect.Client[v1.StreamSensorDataRequest, v1.StreamSensorDataResponse]
}

// StreamSensorData calls sensor.v1.SensorService.StreamSensorData.
func (c *sensorServiceClient) StreamSensorData(ctx context.Context, req *connect.Request[v1.StreamSensorDataRequest]) (*connect.ServerStreamForClient[v1.StreamSensorDataResponse], error) {
	return c.streamSensorData.CallServerStream(ctx, req)
}

// SensorServiceHandler is an implementation of the sensor.v1.SensorService service.
type SensorServiceHandler interface {
	StreamSensorData(context.Context, *connect.Request[v1.StreamSensorDataRequest], *connect.ServerStream[v1.StreamSensorDataResponse]) error
}

// NewSensorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSensorServiceHandler(svc SensorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sensorServiceStreamSensorDataHandler := connect.NewServerStreamHandler(
		SensorServiceStreamSensorDataProcedure,
		svc.StreamSensorData,
		connect.WithSchema(sensorServiceStreamSensorDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sensor.v1.SensorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SensorServiceStreamSensorDataProcedure:
			sensorServiceStreamSensorDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSensorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSensorServiceHandler struct{}

func (UnimplementedSensorServiceHandler) StreamSensorData(context.Context, *connect.Request[v1.StreamSensorDataRequest], *connect.ServerStream[v1.StreamSensorDataResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("sensor.v1.SensorService.StreamSensorData is not implemented"))
}
